{"version":3,"sources":["components/Form.js","App.js","serviceWorker.js","index.js"],"names":["copy","val","JSON","parse","stringify","frameworks","javascript","java","python","php","skillLanguage","initialFields","programingLanguages","languages","language","skill","name","surname","phoneNumber","email","cv","relocation","git","linkedin","agreement","programmingDesc","Form","useState","formData","setFormData","programmingLanguage","setProgrammingLanguage","technology","setTechnology","isLoading","setIsLoading","toggleLanguageFramework","framework","lang","find","el","includes","filter","map","onFieldChange","field","data","Container","maxWidth","onSubmit","e","preventDefault","fetch","method","headers","body","then","res","json","finally","Paper","className","Grid","container","spacing","xs","item","TextField","label","placeholder","variant","required","value","onChange","target","FormControlLabel","control","Switch","checked","Typography","gutterBottom","i","key","index","onLanguageInput","Select","fullWidth","onLanguageSkillChange","MenuItem","IconButton","onClick","_","onRemoveLanguage","color","Button","multiline","event","Object","keys","size","some","justify","removeProgrammingLanguage","Chip","onDelete","arr","addTechnology","type","Checkbox","disabled","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ad5a5a89.chunk.js","sourcesContent":["import React, { useState } from \"react\"\nimport {\n  Container,\n  TextField,\n  Paper,\n  Grid,\n  FormControl,\n  Switch,\n  FormControlLabel,\n  Checkbox,\n  Select,\n  MenuItem,\n  Typography,\n  Chip,\n  Button,\n  IconButton,\n} from \"@material-ui/core\"\nimport DeleteIcon from \"@material-ui/icons/Delete\"\n\nconst copy = (val) => JSON.parse(JSON.stringify(val))\n\nconst frameworks = {\n  javascript: [\"NodeJS\", \"React\", \"Angular\", \"Vue\", \"express\", \"NestJS\"],\n  java: [\"JSP\", \"Spring\", \"SpringBoot\", \"JSF\", \"Hibernate\", \"JUnit\", \"Spock\"],\n  python: [\n    \"Python 3.x\",\n    \"Python 2.x\",\n    \"Django\",\n    \"Flask\",\n    \"SQLAlchemy\",\n    \"Machine Learning\",\n  ],\n  php: [\"Symfony\", \"Zend\", \"Laravel\", \"PHP 7\", \"PHP 5\", \"Wordpress\", \"Magento\"],\n  \"c#\": [\".Net\", \"Entity Framework\", \"ASP.NET\", \"WPF\", \"UWP\"],\n  \"databases, cloud, git\": [\n    \"Redis\",\n    \"RabbitMQ\",\n    \"Docker\",\n    \"MongoDB\",\n    \"MySQL\",\n    \"Kubernetes\",\n    \"AWS\",\n    \"Azure\",\n    \"Microservice Architecture\",\n    \"PostgreSQL\",\n    \"Git\",\n    \"SVN\",\n  ],\n}\nconst skillLanguage = [\"A1\", \"A2\", \"B1\", \"B2\", \"C1\", \"C2\", \"Native\"]\n\nconst initialFields = {\n  programingLanguages: [],\n  languages: [{ language: \"\", skill: \"\" }],\n  name: \"\",\n  surname: \"\",\n  phoneNumber: \"\",\n  email: \"\",\n  cv: null,\n  relocation: false,\n  git: \"\",\n  linkedin: \"\",\n  agreement: false,\n  programmingDesc: \"\",\n}\nexport default function Form() {\n  const [formData, setFormData] = useState(initialFields)\n  const [programmingLanguage, setProgrammingLanguage] = useState(\"\")\n  const [technology, setTechnology] = useState(\"\")\n  const [isLoading, setIsLoading] = useState(false)\n  // const [programingLanguages, setLanguages] = useState([])\n  const selectProgramingLanguage = (event) => {\n    setFormData({\n      ...formData,\n      programingLanguages: [\n        ...formData.programingLanguages,\n        { name: event.target.value, frameworks: [] },\n      ],\n    })\n  }\n  const toggleLanguageFramework = (language, framework) => {\n    const lang = formData.programingLanguages.find((el) => el.name === language)\n    if (lang.frameworks.includes(framework)) {\n      lang.frameworks = lang.frameworks.filter((el) => el !== framework)\n    } else {\n      lang.frameworks = [...lang.frameworks, framework]\n    }\n    const programingLanguages = formData.programingLanguages.map((el) =>\n      el.name === language ? lang : el\n    )\n    setFormData({ ...formData, programingLanguages })\n  }\n  const onSubmit = (e) => {\n    e.preventDefault()\n    setIsLoading(true)\n    fetch(\"/form/create\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(formData),\n    })\n      .then((res) => res.json())\n      .then(() => {\n        setFormData(initialFields)\n      })\n      .finally(() => setIsLoading(false))\n  }\n  const onLanguageInput = (val, index) => {\n    const data = copy(formData)\n    data.languages[index].language = val\n    setFormData(data)\n  }\n  const onFieldChange = (val, field) => {\n    const data = copy(formData)\n    data[field] = val\n    setFormData(data)\n  }\n\n  const onLanguageSkillChange = (e, index) => {\n    const data = copy(formData)\n    data.languages[index].skill = e\n    setFormData(data)\n  }\n  const addLanguage = () => {\n    const data = copy(formData)\n    data.languages = [...data.languages, { language: \"\", skill: \"\" }]\n    setFormData(data)\n  }\n  const onRemoveLanguage = (index) => {\n    const data = copy(formData)\n    data.languages = data.languages.filter((_, i) => i !== index)\n    setFormData(data)\n  }\n  const addProgrammingLanguage = () => {\n    if (Object.keys(frameworks).some((el) => el === programmingLanguage)) {\n      return\n    }\n    setProgrammingLanguage(\"\")\n    const data = copy(formData)\n    data.programingLanguages = [\n      ...data.programingLanguages,\n      { name: programmingLanguage, frameworks: [] },\n    ]\n    frameworks[programmingLanguage] = []\n    setFormData(data)\n  }\n  const addTechnology = (language) => {\n    const data = copy(formData)\n    data.programingLanguages = data.programingLanguages.map((el) => {\n      if (el.name !== language) {\n        return el\n      }\n      let arr\n      if (el.frameworks.includes(technology)) {\n        arr = el.frameworks\n      } else {\n        arr = [...el.frameworks, technology]\n      }\n\n      return { ...el, frameworks: arr }\n    })\n    frameworks[language] = [...frameworks[language], technology]\n    setTechnology(\"\")\n    setFormData(data)\n  }\n  const removeProgrammingLanguage = (lang) => {\n    const data = copy(formData)\n    data.programingLanguages = data.programingLanguages.filter(\n      (el) => el.name !== lang.name\n    )\n    setFormData(data)\n  }\n\n  return (\n    <Container maxWidth=\"sm\">\n      <form onSubmit={onSubmit}>\n        <Paper className=\"form\">\n          <h1>Programming experience form</h1>\n          <Grid container>\n            <fieldset className=\"fieldset\">\n              <legend>Personal data</legend>\n              <Grid container spacing={2}>\n                <Grid xs={6} item>\n                  <TextField\n                    label=\"Name\"\n                    placeholder=\"Your name\"\n                    variant=\"outlined\"\n                    required\n                    value={formData.name}\n                    onChange={(e) => onFieldChange(e.target.value, \"name\")}\n                  />\n                </Grid>\n                <Grid xs={6} item>\n                  <TextField\n                    label=\"Lastname\"\n                    placeholder=\"Your lastname\"\n                    variant=\"outlined\"\n                    required\n                    value={formData.surname}\n                    onChange={(e) => onFieldChange(e.target.value, \"surname\")}\n                  />\n                </Grid>\n                <Grid xs={12} item>\n                  <FormControlLabel\n                    control={\n                      <Switch\n                        onChange={(e) =>\n                          onFieldChange(e.target.checked, \"relocation\")\n                        }\n                        checked={formData.relocation}\n                        name=\"checkedB\"\n                      />\n                    }\n                    label=\"Relocation to Poland /EU\"\n                  />\n                </Grid>\n                <Grid item xs={12} className=\"languages\">\n                  <Typography variant=\"subtitle1\" gutterBottom>\n                    Languages\n                  </Typography>\n                  {formData.languages.map((lang, i) => (\n                    <Grid spacing={3} container key={i}>\n                      <Grid item xs={5}>\n                        <TextField\n                          label=\"Language\"\n                          variant=\"outlined\"\n                          value={lang.val}\n                          onChange={(e) => onLanguageInput(e.target.value, i)}\n                        />\n                      </Grid>\n                      <Grid item xs={5}>\n                        <Select\n                          variant=\"outlined\"\n                          value={lang.skill}\n                          fullWidth\n                          onChange={(e) =>\n                            onLanguageSkillChange(e.target.value, i)\n                          }\n                        >\n                          {skillLanguage.map((el) => (\n                            <MenuItem key={el} value={el}>\n                              {el}\n                            </MenuItem>\n                          ))}\n                        </Select>\n                      </Grid>\n                      <Grid item xs={2}>\n                        <IconButton onClick={() => onRemoveLanguage(i)}>\n                          <DeleteIcon color=\"action\" />\n                        </IconButton>\n                      </Grid>\n                    </Grid>\n                  ))}\n                  <Button\n                    className=\"language__btn\"\n                    variant=\"contained\"\n                    color=\"secondary\"\n                    onClick={addLanguage}\n                  >\n                    ADD\n                  </Button>\n                </Grid>\n                <Grid xs={12} item>\n                  <TextField\n                    label=\"Link to github, gitlab, bitbucket...\"\n                    placeholder=\"\"\n                    variant=\"outlined\"\n                    fullWidth\n                    onChange={(e) => onFieldChange(e.target.value, \"git\")}\n                  />\n                </Grid>\n                <Grid xs={12} item>\n                  <TextField\n                    label=\"Link to linkedin\"\n                    placeholder=\"\"\n                    variant=\"outlined\"\n                    fullWidth\n                    onChange={(e) => onFieldChange(e.target.value, \"linkedin\")}\n                  />\n                </Grid>\n              </Grid>\n            </fieldset>\n            <fieldset className=\"fieldset\">\n              <legend>Technical experience</legend>\n              <div className=\"programming__desc\">\n                <Typography variant=\"subtitle1\" gutterBottom>\n                  Describe your programming experience and your responsibilities\n                  and if you can you can provide link to demo or code\n                </Typography>\n                <TextField\n                  label=\"Description\"\n                  placeholder=\"\"\n                  variant=\"outlined\"\n                  className=\"add__language\"\n                  fullWidth\n                  value={formData.programmingDesc}\n                  multiline\n                  onChange={(e) => {\n                    onFieldChange(e.target.value, \"programmingDesc\")\n                  }}\n                />\n              </div>\n              <Typography variant=\"subtitle1\" gutterBottom>\n                Select your programing languages with frameworks\n              </Typography>\n              <Grid xs={6} item>\n                <Select\n                  variant=\"outlined\"\n                  value=\"\"\n                  fullWidth\n                  onChange={selectProgramingLanguage}\n                >\n                  {Object.keys(frameworks)\n                    .filter(\n                      (framework) =>\n                        !formData.programingLanguages.find(\n                          (el) => el.name === framework\n                        )\n                    )\n                    .map((framework) => (\n                      <MenuItem key={framework} value={framework}>\n                        {framework}\n                      </MenuItem>\n                    ))}\n                </Select>\n              </Grid>\n              <div className=\"box\">\n                <Grid item xs={12}>\n                  <Typography variant=\"caption\">\n                    Didn&apos;t found your programming language <br /> Use input\n                    below\n                  </Typography>\n                  <Grid container className=\"add\">\n                    <TextField\n                      label=\"Name of programming language\"\n                      placeholder=\"\"\n                      variant=\"outlined\"\n                      className=\"add__language\"\n                      size=\"small\"\n                      value={programmingLanguage}\n                      onChange={(e) => {\n                        setProgrammingLanguage(e.target.value)\n                      }}\n                    />\n                    <Button\n                      className=\"add__btn\"\n                      variant=\"contained\"\n                      color=\"secondary\"\n                      onClick={addProgrammingLanguage}\n                    >\n                      ADD\n                    </Button>\n                  </Grid>\n                </Grid>\n              </div>\n              {formData.programingLanguages.map((language) => (\n                <div className=\"name\" key={language.name}>\n                  <Grid container justify=\"space-between\">\n                    <Typography\n                      className=\"name__title\"\n                      variant=\"h6\"\n                      gutterBottom\n                    >\n                      {language.name}\n                    </Typography>\n                    <IconButton\n                      onClick={() => removeProgrammingLanguage(language)}\n                    >\n                      <DeleteIcon color=\"action\" />\n                    </IconButton>\n                  </Grid>\n                  <div className=\"technologies\">\n                    <Typography\n                      variant=\"subtitle2\"\n                      className=\"technologies__title\"\n                    >\n                      technologies\n                    </Typography>\n                    {frameworks[language.name].map((el) => {\n                      return (\n                        <Chip\n                          className=\"form__chip\"\n                          key={el}\n                          label={el}\n                          onClick={() =>\n                            toggleLanguageFramework(language.name, el)\n                          }\n                          variant={\n                            language.frameworks.includes(el)\n                              ? \"default\"\n                              : \"outlined\"\n                          }\n                          color=\"primary\"\n                          onDelete={\n                            language.frameworks.includes(el)\n                              ? () => toggleLanguageFramework(language.name, el)\n                              : null\n                          }\n                        />\n                      )\n                    })}\n                    <div>\n                      <Grid item xs={12}>\n                        <Typography variant=\"caption\">\n                          Didn&apos;t found your technology <br /> Use input\n                          below\n                        </Typography>\n                        <Grid container className=\"add\">\n                          <TextField\n                            label=\"Name of technology\"\n                            placeholder=\"\"\n                            variant=\"outlined\"\n                            className=\"add__language\"\n                            size=\"small\"\n                            value={technology}\n                            onChange={(e) => setTechnology(e.target.value)}\n                          />\n                          <Button\n                            className=\"add__btn\"\n                            variant=\"contained\"\n                            color=\"secondary\"\n                            onClick={() => addTechnology(language.name)}\n                          >\n                            ADD\n                          </Button>\n                        </Grid>\n                      </Grid>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </fieldset>\n            <fieldset className=\"fieldset\">\n              <legend>Contact data</legend>\n              <Grid item xs={12}>\n                <Grid item container spacing={2}>\n                  <Grid item xs={6}>\n                    <TextField\n                      type=\"email\"\n                      label=\"Email\"\n                      variant=\"outlined\"\n                      required\n                      value={formData.email}\n                      onChange={(e) => onFieldChange(e.target.value, \"email\")}\n                    />\n                  </Grid>\n                  <Grid xs={6} item>\n                    <TextField\n                      label=\"Phone number\"\n                      variant=\"outlined\"\n                      required\n                      value={formData.phoneNumber}\n                      onChange={(e) =>\n                        onFieldChange(e.target.value, \"phoneNumber\")\n                      }\n                    />\n                  </Grid>\n                </Grid>\n                <FormControlLabel\n                  required\n                  control={\n                    <Checkbox\n                      required\n                      checked={formData.agreement}\n                      onChange={(e) =>\n                        onFieldChange(e.target.checked, \"agreement\")\n                      }\n                    />\n                  }\n                  label=\"I declare that I use the above e-mail address / phone nubmer and agree to treat this address as a correspondence address for future recruitment process\"\n                />\n              </Grid>\n            </fieldset>\n          </Grid>\n          <Grid justify=\"center\" container>\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              type=\"submit\"\n              disabled={isLoading}\n            >\n              Submit\n            </Button>\n          </Grid>\n        </Paper>\n      </form>\n    </Container>\n  )\n}\n","import React, { useState } from \"react\"\n\nimport \"./App.css\"\nimport Form from \"./components/Form\"\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Form />\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      // eslint-disable-next-line no-param-reassign\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\")\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\")\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      )\n    })\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport \"./index.css\"\nimport App from \"./App\"\nimport * as serviceWorker from \"./serviceWorker\"\n\nReactDOM.render(<App />, document.getElementById(\"root\"))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}