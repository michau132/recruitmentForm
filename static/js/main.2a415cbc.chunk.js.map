{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["frameworks","javascript","java","php","App","useState","languages","setLanguages","className","Container","maxWidth","onSubmit","e","preventDefault","alert","Paper","Grid","container","spacing","xs","item","TextField","label","placeholder","variant","required","FormControlLabel","control","Switch","fullWidth","Typography","gutterBottom","Select","value","onChange","event","name","target","Object","keys","filter","framework","find","el","map","MenuItem","key","language","Chip","onClick","lang","includes","langs","handleClick","color","type","Checkbox","justify","Button","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2a415cbc.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport {Container, TextField, Paper, Grid, FormControl, Switch, FormControlLabel, Checkbox, Select, MenuItem, Typography, Chip, Button} from '@material-ui/core'\n\nimport './App.css';\nconst frameworks = {\n  javascript: ['NodeJS', 'React', 'Angular', 'Vue', 'express', 'NestJS'],\n  java: ['JSP', 'Spring', 'SpringBoot'],\n  php: ['Symfony', 'Zend'],\n  'c#': ['.Net']\n}\nfunction App() {\n  const [languages, setLanguages] = useState([])\n  const selectLanguage = (event) => {\n    setLanguages([...languages, {name: event.target.value, frameworks: []}]);\n  };\n  const handleClick = (language, framework) => {\n    const lang = languages.find(el => el.name === language)\n    if(lang.frameworks.includes(framework)) {\n      lang.frameworks = lang.frameworks.filter(el => el !== framework)\n    } else {\n      lang.frameworks = [...lang.frameworks, framework]\n    }\n    const langs = languages.map(el => el.name === language ? lang: el)\n    setLanguages(langs)\n  };\n  const onSubmit = (e) => {\n    e.preventDefault()\n    alert('No elo')\n  }\n  return (\n    <div className=\"App\">\n<Container maxWidth=\"sm\">\n      <form onSubmit={onSubmit}>\n        <Paper className=\"form\">\n          <h1>Programming experience form</h1>\n          <Grid container>\n              <fieldset className=\"fieldset\">\n              <legend>Personal data</legend>\n            <Grid container spacing={2}>\n              <Grid xs={6} item>\n              <TextField label=\"Name\" placeholder=\"Your name\" variant=\"outlined\" required />\n              </Grid>\n              <Grid xs={6} item>\n\n              <TextField label=\"Lastname\" placeholder=\"Your lastname\" variant=\"outlined\" required />\n              </Grid>\n              <Grid xs={12} item>\n              <FormControlLabel control={<Switch />} label=\"Relocation\" />\n              </Grid>\n              <Grid xs={12} item>\n              <TextField label=\"Link to github, gitlab, bitbucket...\" placeholder=\"\" variant=\"outlined\" fullWidth  />\n              </Grid>\n              <Grid xs={12} item>\n              <TextField label=\"Link to linkedin\" placeholder=\"\" variant=\"outlined\" fullWidth  />\n              </Grid>\n            </Grid>\n              </fieldset>\n              <fieldset className=\"fieldset\">\n                <legend>Technical experience</legend>\n                <Typography variant=\"subtitle1\" gutterBottom>Select your languages with frameworks</Typography>\n                <Grid xs={6} item>\n                  \n                <Select variant=\"outlined\" value=\"\" fullWidth onChange={selectLanguage}>\n                  {Object.keys(frameworks).filter(framework => !languages.find(el => el.name === framework)).map(framework => (\n                    <MenuItem key={framework} value={framework}>{framework}</MenuItem>  \n                  ))}\n                </Select>\n                </Grid>\n                {\n                  languages.map(language => (\n                    <div className=\"name\" key={language.name}>\n                      <Typography variant=\"subtitle1\" gutterBottom>{language.name}</Typography>\n                      {\n                        frameworks[language.name].map(el => {\n                          return <Chip\n                          key={el}\n                            label={el}\n                            onClick={() => handleClick(language.name, el)}\n                            color={language.frameworks.includes(el) ? \"primary\" : 'secondary'}\n                          />\n                        })\n                      }\n                    </div>\n                  ))\n                }\n              </fieldset>\n              <fieldset className=\"fieldset\">\n                <legend>Contact data</legend>\n                <Grid item xs={12}>\n                  <Grid item container spacing={2}>\n                    <Grid item xs={6}>\n                      <TextField type=\"email\" label=\"Email\" variant=\"outlined\"  required />\n                    </Grid>\n                    <Grid xs={6} item>\n                      <TextField label=\"Phone number\" variant=\"outlined\"  required />\n                    </Grid>\n                  </Grid>\n                <FormControlLabel required control={<Checkbox required/>} label=\"I declare that I use the above e-mail address / phone nubmer and agree to treat this address as a correspondence address for future recruitment process\" />\n              </Grid>\n              </fieldset>\n              \n          </Grid>\n          <Grid justify=\"center\" container><Button variant=\"contained\" color=\"primary\" type=\"submit\">Submit</Button></Grid>\n        </Paper>\n\n      </form>\n  \n  </Container>      \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}